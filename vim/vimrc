" General Vim Config
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" call Pathogen plugin handler
"filetype off
call pathogen#runtime_append_all_bundles() 

" Start up MacVim without toolbar
set go-=T

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Change the leader
let mapleader=","

" Add shortcut to edit vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Source the vimrc file after saving it
  autocmd bufwritepost .vimrc source $MYVIMRC

"  " Save and restore folds when a file is closed and re-opened
"  au BufWinLeave .* mkview
"  au BufWinEnter .* silent loadview
"  set viewoptions=folds

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" set backup directory
set backupdir=~/.tmp

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup  		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		      " show the cursor position all the time
set showcmd		    " display incomplete commands
set incsearch		  " do incremental searching
set nu            " number each line
set noeb          " turn off audible bell
set vb            " turn on visual bell

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Convenient command to see the difference between the current buffer and the
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" force write a file you don't have permission to write to
cmap w!! %!sudo tee > /dev/null %


" Map hotkey to change directory to the file being edited
map <leader>cd :cd %:p:h<CR>:pwd<CR>

" Sets wildmenu
set wildmenu

" Map CTRL-E to do what ',' used to do 
nnoremap <c-e> ,
vnoremap <c-e> ,

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
  
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Esc to remove search highlighting
nnoremap <silent> <esc> :noh<return><esc>

" Use ctrl+hjkl to move between window splits
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Move a line of text using Alt+[jk], indent with Alt+[hl]
nnoremap <D-j> :m+<CR>==
nnoremap <D-k> :m-2<CR>==
nnoremap <D-h> <<
nnoremap <D-l> >>
inoremap <D-j> <Esc>:m+<CR>==gi
inoremap <D-k> <Esc>:m-2<CR>==gi
inoremap <D-h> <Esc><<`]a
inoremap <D-l> <Esc>>>`]a
vnoremap <D-j> :m'>+<CR>gv=gv
vnoremap <D-k> :m-2<CR>gv=gv
vnoremap <D-h> <gv
vnoremap <D-l> >gv

" Set colorscheme
syntax enable
set background=dark
colorscheme solarized

" highlights code that goes over 80 columns
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" For Ruby
set tabstop=2		  " Tab characters = 4 spaces when displayed
set shiftwidth=2	" Use 2 spaces for each insertion of (auto)indent
set softtabstop=2	" Tabs count for 2 spaces when editing (fake tabs)
set expandtab		  " <tab> -> spaces in insert mode
set smarttab		  " Smart tabbing!
map <leader>r :rubyf %<CR>
map <leader>rb :!irb<CR>
imap hh =>

" Plugins
" Start NERDTree at certain directory
" cd ~/documents/programming/ruby

" Add Ctrl-n shortcut for NERDtree
" open NERDTree in folder in active buffer
nmap <silent> <c-n> :NERDTreeToggle %:p:h<CR>
let g:NERDTreeWinSize=22

" Enhanced Commentify Key Bindings
let g:EnhCommentifyFirstLineMode = "yes"
let g:EnhCommentifyUserBindings  = "yes"

nmap <silent> <Leader>s <Plug>Comment
nmap <silent> <Leader>d <Plug>DeComment
nmap <silent> <Leader>t <Plug>Traditional
nmap <silent> <Leader>f <Plug>FirstLine
vmap <silent> <Leader>c <Plug>VisualComment
vmap <silent> <Leader>d <Plug>VisualDeComment
vmap <silent> <Leader>t <Plug>VisualTraditional
vmap <silent> <Leader>f <Plug>VisualFirstLine
